
plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
}

allure {
    version = '2.8.1'
    autoconfigure = false
    aspectjweaver = true
 //   allureJavaVersion = LATEST_VERSION
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
}
repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://maven.qameta.io/allure"
    }
  }

dependencies {
    // Cucumber dependencies
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.13.0'
    implementation group: 'io.cucumber', name: 'cucumber-core', version: '7.13.0'


    // https://mvnrepository.com/artifact/junit/junit
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.14.0'

    // Selenium WebDriver dependencies
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.12.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '4.12.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '4.12.0'

    //Reporting
    implementation 'io.qameta.allure:allure-cucumber7-jvm:2.20.1'
  //  classpath "io.qameta.allure:allure-gradle:2.8.1"

}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}
task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm',
                    '--glue',
                    'com.au.kfc',
                    'src/test/resources',
            ]
            systemProperties System.properties
        }
    }
}

test {
    ignoreFailures = true
    useJUnit()
    systemProperties System.properties
}


import io.qameta.allure.gradle.task.AllureReport

task allureAggregatedReport(type: AllureReport) {
    resultsDirs = subprojects.allure.resultsDir
}
tasks.withType(io.qameta.allure.gradle.task.AllureReport) {
    clean = true
}
